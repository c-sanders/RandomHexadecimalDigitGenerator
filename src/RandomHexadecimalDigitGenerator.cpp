#include <RandomHexadecimalDigitGenerator.hpp>

#include <iostream>
#include <sstream>
#include <functional>


using std::cout;
using std::endl;
using std::stringstream;


int                  RandomHexadecimalDigitGenerator::instanceCount        = 0;

RandomHexadecimalDigitGenerator * RandomHexadecimalDigitGenerator::randomHexadecimalDigitGenerator_p = nullptr;



/**
 * @brief RandomHexadecimalDigitGenerator::createRandomHexadecimalDigitGenerator
 * @return RandomHexadecimalDigitGenerator *
 * 
 * This method should be used to create an instance of this class.
 * 
 * If it executes successfully, this method will return a pointer to the instance of this class.
 * 
 * This class is implemented as a singleton, so a maximum of only one instance of it can ever exist
 * any point in time. It is for this reason that this method should be used to create an instance of
 * this class, and not the class's constructor. Further more, this class's constructor is declared
 * to be private, so a user of this class can't use it anyway.
 */

RandomHexadecimalDigitGenerator *
RandomHexadecimalDigitGenerator::createRandomHexadecimalDigitGenerator
(
)
{
	const
	string   nameFunction = "RandomHexadecimalDigitGenerator::createRandomHexadecimalDigitGenerator : ";


	cout << nameFunction << "Enter" << endl;

	// Does an instance of the RandomHexadecimalDigitGenerator already exist?
	
	if (RandomHexadecimalDigitGenerator::randomHexadecimalDigitGenerator_p == nullptr)
	{
		RandomHexadecimalDigitGenerator::randomHexadecimalDigitGenerator_p = new RandomHexadecimalDigitGenerator();
	}
	else
	{
		cout << "Random Hex Generator already eists." << endl;
	}

	cout << nameFunction << "Exit" << endl;

	return(RandomHexadecimalDigitGenerator::randomHexadecimalDigitGenerator_p);
}


/**
 * @brief RandomHexadecimalDigitGenerator::RandomHexadecimalDigitGenerator
 * 
 * Constructor method for this class.
 * 
 * Visibility : private
 * 
 * Note that this method has private visibility. It is for this reason that it cannot be used by
 * users of this class. Rather, this method's createRandomHexadecimalDigitGenerator method should
 * be used instead.
 */

RandomHexadecimalDigitGenerator::RandomHexadecimalDigitGenerator
(
)
{
	const
	string   nameFunction = "RandomHexadecimalDigitGenerator Ctor : ";


	cout << nameFunction << "Enter" << endl;

	this->setupRNG_default();
	this->setupRNG_mt19937();

	this->useSeparatorCharacter = false;
	this->separatorCharacter    = '-';

	cout << nameFunction << "Exit" << endl;
}


/**
 * @brief RandomHexadecimalDigitGenerator::~RandomHexadecimalDigitGenerator
 * 
 * Destructor method for this class.
 * 
 * Visibility : private
 */

RandomHexadecimalDigitGenerator::~RandomHexadecimalDigitGenerator
(
)
{
	const
	string   nameFunction = "RandomHexadecimalDigitGenerator Dtor : ";


	cout << nameFunction << "Enter" << endl;

	cout << nameFunction << "Exit" << endl;
}


/**
 * @brief RandomHexadecimalDigitGenerator::setStringLength
 * @param stringLength
 * @return int
 * 
 * This method sets the default length for strings which are generated by this class.
 * 
 * In effect, this method sets a default value for how many randomly generated hexadecimal digits
 * will be present in the strings which are generated by this class.
 */

int
RandomHexadecimalDigitGenerator::setStringLength
(
 int   stringLength
)
{
	if (stringLength <= 0)
	{
		this->stringLength = 0;
	}
	else
	{
		this->stringLength = stringLength;
	}

	return(this->stringLength);
}


/**
 * @brief RandomHexadecimalDigitGenerator::getStringLength
 * @return int
 * 
 * This method gets the default length for strings which are generated by this class.
 */


int
RandomHexadecimalDigitGenerator::getStringLength
( 
)
{
	return(this->stringLength);
}


char
RandomHexadecimalDigitGenerator::setSeparatorCharacter
(
 char   separatorCharacter
)
{
	this->separatorCharacter = separatorCharacter;

	return(this->separatorCharacter);
}


char
RandomHexadecimalDigitGenerator::getSeparatorCharacter
(
)
{
	return(this->separatorCharacter);
}


void
RandomHexadecimalDigitGenerator::setUseSeparatorCharacter
(
    bool   useSeparatorCharacter
)
{
	this->useSeparatorCharacter = useSeparatorCharacter;
}

void
RandomHexadecimalDigitGenerator::setupRNG_default
(
)
{
	const
	string   nameFunction = "RandomHexadecimalDigitGenerator::setupRNG_default : ";


	cout << nameFunction << "Enter" << endl;

	cout << nameFunction << "Exit" << endl;
}


void
RandomHexadecimalDigitGenerator::setupRNG_mt19937
(
)
{
	const
	string   nameFunction = "RandomHexadecimalDigitGenerator::setupRNG_mt19937 : ";


	cout << nameFunction << "Enter" << endl;

	// Initialise the seed for the Random Number Generator (rng).

	this->seed = time(0);

	// Create an instance of the RNG, seeding it with the value which was just created.

	this->rng_p = new mt19937(this->seed);

	// mt19937(this->seed)
	
	this->distribution_p = new uniform_int_distribution<int>(0, 15);

	cout << nameFunction << "Exit" << endl;
}


string
RandomHexadecimalDigitGenerator::generateRandomHexValue_invokeUsingBoundFunction
(
 int  amount
)
{
	auto
	rng = std::bind
	      (
	       * this->distribution_p,
	       * this->rng_p
	      );

	int                             counter;

	char                            hexValue;
	
	stringstream                    hexString;

	// auto                            rng = (* this->distribution_p)(* this->rng_p);

	// mt19937                       * rng_p = nullptr;

	// uniform_int_distribution<int>   distribution(0, 15);


	// Get a random integer which is in the range 0 - 15.

	// (* this->distribution_p)(* this->rng_p);

	// value = rng();

	// value = this->distribution_p(* this->rng_p);

	// Convert this integer into a hexadecimal character.

	hexValue = (* this->distribution_p)(* this->rng_p);
	cout << "First hexadecimal value = " << (int)(hexValue) << endl;
	hexValue = (* this->distribution_p)(* this->rng_p);
	cout << "First hexadecimal value = " << (int)(hexValue) << endl;
	hexValue = (* this->distribution_p)(* this->rng_p);
	cout << "First hexadecimal value = " << (int)(hexValue) << endl;

	// hexValue = (* this->distribution_p)(* this->rng_p)();
	hexValue = this->convertIntToChar(rng());
	cout << "Hexadecimal value = " << hexValue << endl;
	// hexValue = (* this->distribution_p)(* this->rng_p)();
	hexValue = this->convertIntToChar(rng());
	cout << "Hexadecimal value = " << hexValue << endl;
	// hexValue = (* this->distribution_p)(* this->rng_p)();
	hexValue = this->convertIntToChar(rng());
	cout << "Hexadecimal value = " << hexValue << endl;

	for
	(
	 int   counter = 0;
	 counter < amount;
	 ++counter
	)
	{
		// rng();

		hexValue = this->convertIntToChar(10);

		hexString << hexValue;
		cout << hexValue << endl;
	}

	// cout << hexString.str() << endl;

	return(hexString.str());
}


string
RandomHexadecimalDigitGenerator::generateRandomHexValue_invokeUsingDirectFunction
(
 int  amount
)
{
	int            counter;

	char           hexDigit;

	stringstream   hexString;


	// value = rng();

	// value = this->distribution_p(* this->rng_p);

	// Convert this integer into a hexadecimal character.

	for
	(
	 int   counter = 0;
	 counter < amount ;
	 ++counter
	)
	{
		int   randomInteger;


		// Get a random integer which is in the range 0 - 15.
		//
		// Can the following segment of the expression below be turned into a Lambda function?
		//
		//   (* this->distribution_p)(* this->rng_p);

		randomInteger = (* this->distribution_p)(* this->rng_p);

		// Convert this random integer into a character which represents a valid dexadecimal digit.

		hexDigit = this->convertIntToChar(randomInteger);

		hexString << hexDigit;

		if (this->useSeparatorCharacter)
		{
			if (
				(((counter + 1) % 4) == 0) &&
				((counter + 1) != amount)
			   )
			{
				hexString << this->separatorCharacter;
			}
		}
	}

	// cout << "Hex string                  = " << hexString.str() << endl;

	return(hexString.str());
}


/**
 * @brief RandomHexadecimalDigitGenerator::generate
 * @return 
 * 
 * Generate a string which is comprised solely of random hexadecimal digits. The number of digits
 * which are contained within this string will be equal to the currently set string length.
 */

string
RandomHexadecimalDigitGenerator::generate
(
)
{
	string   hexString;


	// Use the current setting for the string length, i.e. this->stringLength, to determine how many
	// digits the generated string should contain.

	hexString = this->generateRandomHexValue_invokeUsingDirectFunction(this->stringLength);

	return(hexString);
}


string
RandomHexadecimalDigitGenerator::generate
(
 int   stringLength
)
{
	string   hexString;


	hexString = this->generateRandomHexValue_invokeUsingDirectFunction(stringLength);

	return(hexString);
}


/**
 * @brief RandomHexadecimalDigitGenerator::generateUUID
 * @return A string which is comprised only of 16 random hexadecimal digits.
 * 
 * This method can be used to generate a string which is comprised only of 16 random hexadecimal
 * digits.
 * 
 * It is essentially a convenience method, which can be used instead of the following
 * method invocation;
 * 
 *   RandomHexadecimalDigitGenerator::generate(16)
 */

string
RandomHexadecimalDigitGenerator::generateUUID
(
)
{
	string   hexString;


	hexString = this->generateRandomHexValue_invokeUsingDirectFunction(16);

	return(hexString);
}


char
RandomHexadecimalDigitGenerator::convertIntToChar
(
 int   value
)
{
	char   hexValue;

	char   hexValueArray[] = {'0',
	                          '1',
	                          '2',
	                          '3',
	                          '4',
	                          '5',
	                          '6',
	                          '7',
	                          '8',
	                          '9',
	                          'A',
	                          'B',
	                          'C',
	                          'D',
	                          'E',
	                          'F'};


	hexValue = hexValueArray[value];

	// cout << "Hex value = " << hexValue << endl;

	return(hexValue);
}
